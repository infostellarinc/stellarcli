/*
 * Copyright 2020 Infostellar, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.github.breadmoirai.github-release' version '2.2.11'
    id 'org.curioswitch.gradle-golang-plugin' version '0.1.0'
}

golang {
    executableName = 'stellar'
    goOses = ['linux', 'darwin', 'windows']
    goArchs = ['amd64']
}

afterEvaluate {
    tasks.withType(org.curioswitch.gradle.golang.tasks.GoTask).configureEach { task ->
        if (task.name.startsWith('goBuild')) {
            task.args '-ldflags', "'-X github.com/infostellarinc/stellarcli/cmd.ReleaseVersion=${version}'"
        }
    }

    golang.goOses.get().each { goOs ->
        def camelCase = goOs.capitalize() + 'Amd64'
        task "archive${camelCase}"(type: Zip) {
            dependsOn tasks."goBuild${camelCase}"

            archiveName = "stellar-${project.version}-${goOs}-amd64.zip"
            destinationDir = file('build/zip')

            from "build/exe/${goOs}-amd64"
        }
        tasks.build.dependsOn "archive${camelCase}"
    }
}

githubRelease {
    token = findProperty('github.apiToken') ?: ''
    owner = 'infostellarinc'
    repo = 'stellarcli'
    releaseAssets = fileTree('build/zip')
    allowUploadToExisting = true
}

tasks.githubRelease.dependsOn tasks.build
